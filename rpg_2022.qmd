---
title: "RPG_2022"
format: 
  html:
    code-link: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load_libraries
#| echo: false
#| message: false

library(sf)
library(tidyverse)
library(data.table)
library(tictoc)
library(formattable)
library(glue)

```

```{r}
#| label: util_functions
#| echo: false
#| message: false

display_vecteur_table <- function(vecteur, n_col, byrow = TRUE) {
  n_col = n_col
  len_vec <- length(vecteur)
  n_row <- len_vec %/% n_col + 1
  vec_chunks <- base::split(vecteur, ceiling(seq_along(vecteur) / n_row))
  # same length for last chunk as the others and replace NA with ""
  last_chunk <- vec_chunks[[n_col]]
  length(last_chunk) <- n_row
  last_chunk <- replace(last_chunk, is.na(last_chunk), "")
  vec_chunks[[n_col]] <- last_chunk
  df <- bind_cols(vec_chunks)
  # generate <1st value>-<last value> column headers
  nchar_max <- nchar(len_vec)
  start_indices <- seq(1, len_vec, by = n_row)
  end_indices <- c(seq(n_row, len_vec, by = n_row), len_vec)
  # str_pad is used to get same column width displayed
  col_headers <- paste(
    str_pad(start_indices, width = nchar_max, pad = "0", side = "left"),
    str_pad(end_indices, width = nchar_max, pad = "0", side = "left"),    
    sep = "-"
  )
  names(df) <- col_headers
  # format with formattable
  df |> formattable(
    align = "l",
    list(
      area(col = 1:n_col) ~ formatter(
        "span", style = x ~ style(
          "font-weight" = "100",
          "font-family" = "Helvetica",
          "font-size" = "12px"
        )
      )
    )
  )
}

```

## Registre parcellaire graphique (RPG)

Le fichier de données accessible [ici](https://www.data.gouv.fr/fr/datasets/registre-parcellaire-graphique-rpg-contours-des-parcelles-et-ilots-culturaux-et-leur-groupe-de-cultures-majoritaire/) contient les contours des parcellaires et îlots culturaux et leur groupe de cultures majoritaires.

## Informations sur le Geopackage contenant les données métropolitaines

```{r}
#| label: metadata_gpkg
#| echo: false

gpkg_file <- "DATA/RPG_2-0__GPKG_LAMB93_FXX_2022-01-01/PARCELLES_GRAPHIQUES.gpkg"

layers <- st_layers(gpkg_file)

df <- data.frame(
  name = layers$name,
  geomtype = layers$geomtype[[1]],
  features = layers$features,
  fields = layers$fields,
  crs = layers$crs[[1]][[1]]
) 

df  |> formattable(align = c("l", "l", "r", "r", "l"))

```

## 1. Décompte des codes culture du Geopackage

```{r}
#| label: comptage_codes_culture
#| echo: false
#| message: false
#| warning: false
#| output: false

tic(msg = "comptage codes cultures")
code_cultu_gpkg <- st_read(
  gpkg_file, 
  query = "select distinct code_cultu from parcelles_graphiques order by code_cultu;",
  as_tibble = TRUE
  ) |> 
  pull()
toc()

# comptage codes cultures: 28.56 sec elapsed

display_vecteur_table(code_cultu_gpkg, n_col = 15, byrow = TRUE)

```

### 2. Tableau des des données (non géographiques) du Geopackage

```{r}
#| label: cultures_in_gpkg
#| echo: false

# je charge la nomenclature de référence
file_ref <- "DATA/REFERENCES/REF_CULTURES_GROUPES_CULTURES_2021.csv"
data_ref = fread(file_ref)

gpkg_cultures <- data_ref |> 
  filter(CODE_CULTURE %in% code_cultu_gpkg) |> 
  arrange(CODE_CULTURE)

gpkg_cultures |> 
  formattable(align = c("l", "l", "r", "l"))

```

### 3. Tableau des données relatives aux cultures absentes du Geopackage

```{r}
#| label: cultures_not_in_gpkg
#| echo: false

code_cultu_missing <- data_ref |> 
  filter(!(CODE_CULTURE %in% code_cultu_gpkg)) |> 
  arrange(CODE_CULTURE)

code_cultu_missing |> 
  formattable(align = c("l", "l", "r", "l"))

```

```{r}
#| label: save_data_to_RDS
#| echo: false

get_culture <- function(code_cultu) {

  rds_file <- paste(
    "DATA", "RDS", paste0("rpg_",code_cultu,".RDS"), sep = "/"
  )
  if (!(file.exists(rds_file))) {
    tic(msg = glue("création RDS pour le code culture : {code_cultu}"))
    df <- st_read(
      gpkg_file,
      query = glue(
        "select * from parcelles_graphiques where code_cultu = '{code_cultu}';"
      ),
      as_tibble = TRUE
    )
    saveRDS(df, rds_file)
    toc()
  } 
}
 
code_cultu_gpkg |> 
  walk(get_culture)  

```


```{r}
#| label: plot_gpkg_culture
#| echo: false
#| message: false
#| warning: false
#| output: false

contours_geo <- st_geometry(st_read("DATA/OSM/departements-20180101.shp"))
contour_geo_2154 <- st_transform(contours_geo, crs = st_crs("EPSG:2154"))
# st_bbox(c(xmin = 80000, xmax = 1242000, ymin = 6051000, ymin = 7109000), crs = st_crs("EPSG:2154"))

plot_culture <- function(code_cultu) {
  
  rds_file <- paste(
    "DATA", "RDS", paste0("rpg_",code_cultu,".RDS"), sep = "/"
  )
  png_file <- paste(
    "images", paste0("rpg_",code_cultu,".png"), sep = "/"
  )
  svg_file <- paste(
    "images", paste0("rpg_",code_cultu,".svg"), sep = "/"
  )
  if ((file.exists(rds_file))) {
    tic(msg = glue("lecture RDS et plot pour le code culture : {code_cultu}"))
    data <- readRDS(rds_file) 
    p <- ggplot() +
      geom_sf(data = contour_geo_2154, colour = "blue", linewidth = 0.1, fill = "transparent") +
      geom_sf(data = data, colour = NA, fill = "yellow") +
      coord_sf(
        xlim = c(80000, 1242000),
        ylim = c(6051000, 7109000),
        crs = "EPSG:2154"
      ) +
      theme(
        panel.background = element_rect(fill = 'transparent', color = NA), #transparent panel bg
        plot.background = element_rect(fill = 'transparent', color = NA), #transparent plot bg
        panel.grid.major = element_line(linewidth = 0.1, color = "white"),
        # panel.grid.minor = element_blank(), #remove minor gridlines
        # legend.background = element_rect(fill = 'transparent'), #transparent legend bg
        # legend.box.background = element_rect(fill = 'transparent') #transparent legend panel
        title = element_text(color = "red")
      ) +
      labs(
        title = glue("code culture : {code_cultu}"),
        subtitle = glue(gpkg_cultures |> 
                          filter(CODE_CULTURE == {{ code_cultu }}) |> 
                          pull(LIBELLE_CULTURE))
      )
    ggsave(png_file, p, bg = 'transparent', width = 20, height = 20, units = "cm", dpi = 320)
    #ggsave(svg_file, p, bg = 'black')
    toc()
  } else {
    message(
      glue("Aucune donnée pour le fichier associé au code culture : {code_cultu}")
    )
  }
}

code_cultu_gpkg[181:181] |> 
  walk(plot_culture)

```


