---
title: "Récupération des données RPG"
format: html
---

```{r}
#| label: load_libraries
#| echo: false
#| message: false

library(sf)
library(tidyverse)
library(data.table)
library(tictoc)
library(formattable)
library(glue)

```

```{r}
#| label: util_functions
#| echo: false
#| message: false

display_vecteur_table <- function(vecteur, ncol, byrow = TRUE) {
  ncol = ncol
  len_vec <- length(vecteur)
  nrow <- len_vec %/% ncol + 1
  if (byrow) {
    vecteur <- new_vec(vecteur, nrow, ncol)
  } else {
    vecteur <- vecteur[1:(nrow * ncol)]
  }
  vecteur <- replace(vecteur, is.na(vecteur), "")
  vec_chunks <- base::split(vecteur, ceiling(seq_along(vecteur) / nrow))
  df <- bind_cols(vec_chunks)
  # generate <1st value>-<last value> column headers
  nchar_max <- nchar(len_vec)
  start_indices <- seq(1, len_vec, by = nrow)
  end_indices <- c(seq(nrow, len_vec, by = nrow), len_vec)
  # str_pad is used to get same column width displayed
  col_headers <- paste(
    str_pad(start_indices, width = nchar_max, pad = "0", side = "left"),
    str_pad(end_indices, width = nchar_max, pad = "0", side = "left"),    
    sep = "-"
  )
  names(df) <- col_headers
  # format with formattable
  df |> formattable(
    align = "l",
    list(
      area(col = 1:ncol) ~ formatter(
        "span", style = x ~ style(
          "font-weight" = "100",
          "font-family" = "Helvetica",
          "font-size" = "12px"
        )
      )
    )
  )
}

# reindex vecteur to arrange columns into rows
new_vec <- function(vecteur, nrow, ncol) {
  new_ind <- double(0)
  for (i in 1:ncol) {
    new_ind <- c(new_ind, seq(i, ncol * nrow, by = ncol))
  }
  vecteur[new_ind]
}

```

## Registre parcellaire graphique (RPG)

Le fichier de données accessible [ici](https://www.data.gouv.fr/fr/datasets/registre-parcellaire-graphique-rpg-contours-des-parcelles-et-ilots-culturaux-et-leur-groupe-de-cultures-majoritaire/) contient les contours des parcellaires et îlots culturaux et leur groupe de cultures majoritaires.


```{r}
#| label: charge_ref_nomenclature
#| echo: false

# je charge la nomenclature de référence
file_ref <- "DATA/REFERENCES/REF_CULTURES_GROUPES_CULTURES_2021.csv"
data_ref = fread(file_ref)

```

## Informations sur le Geopackage contenant les données métropolitaines

```{r}
#| label: metadata_gpkg
#| echo: true

gpkg_file <- "DATA/RPG_2-0__GPKG_LAMB93_FXX_2022-01-01/PARCELLES_GRAPHIQUES.gpkg"

layers <- st_layers(gpkg_file)

df <- data.frame(
  name = layers$name,
  geomtype = layers$geomtype[[1]],
  features = layers$features,
  fields = layers$fields,
  crs = layers$crs[[1]][[1]]
) 

df  |> formattable(align = c("l", "l", "r", "r", "l"))

```

### Echantillon des données stockées dans le Geopackage

```{r}
#| label: header_features
#| echo: true
#| message: false
#| output: false

header_gpkg <- st_read(
  gpkg_file, 
  query = "select * from parcelles_graphiques limit 5;",
  as_tibble = TRUE
)

```


```{r}
#| label: display_header_features
#| echo: true
#| message: false

header_gpkg |>
  formattable(align = c("r", "l", "r", "l", "l", "r", "l"))

```


```{r}
#| label: comptage_codes_culture
#| echo: false
#| message: false
#| warning: false
#| output: false

code_cultu_gpkg <- st_read(
  gpkg_file, 
  query = "select distinct code_cultu from parcelles_graphiques order by code_cultu;",
  as_tibble = TRUE
  ) |> 
  pull()

```


```{r}
#| label: display_codes_culture
#| echo: false
#| message: false
#| include: false

display_vecteur_table(code_cultu_gpkg, ncol = 15, byrow = TRUE)

```


```{r}
#| label: comptage_surface_par_code_culture
#| echo: false
#| message: false
#| warning: false
#| output: false

tic(msg = "comptage codes cultures")
surfaces_par_culture <- st_read(
  gpkg_file,
  query = "SELECT code_cultu AS `CODE_CULTURE`, ROUND(SUM(surf_parc),1) AS `SURFACE_TOTALE`, COUNT(code_cultu) AS N, ROUND(SUM(surf_parc)/COUNT(code_cultu), 1) AS `SURFACE_MOYENNE` FROM parcelles_graphiques GROUP BY code_cultu ORDER BY `SURFACE_TOTALE` DESC;",
  as_tibble = TRUE
)
toc()

data_surfaces <- inner_join(surfaces_par_culture, data_ref, join_by(`CODE_CULTURE` == CODE_CULTURE)) |> 
  select(-c(CODE_GROUPE_CULTURE, LIBELLE_GROUPE_CULTURE)) 

saveRDS(data_surfaces, "DATA_SURFACES.RDS")

data_surfaces_display <- data_surfaces |>
  rename(c(
    `CODE CULTURE` = "CODE_CULTURE",
    `TOTAL (ha)` = "SURFACE_TOTALE",
    `MOYENNE (ha)` = "SURFACE_MOYENNE",
    `LIBELLE CULTURE` = "LIBELLE_CULTURE",
    )
  )

```

## Nombre, surface totale et surface moyenne des différents types de culture

```{r}
#| label: display_surfaces_par_culture
#| echo: false
#| message: false


customBlue0 = "#DEE9F700"
customBlue1 = "#0D36BD"

custom_format <- formatter(
  .tag = "span", 
  style = function(x) style(
    display = "block", 
    padding = "0 4px",
    `font-weight` = "bold",
    `font-size` = "15px",
    `border-radius` = "4px", 
    `background-color` = csscolor(gradient(as.numeric(x), customBlue0, customBlue1)),
    color = ifelse(x >= 7, "red","black")
    )
  )

data_surfaces_display |> 
  formattable(
    align = c("l", "r", "r", "r"),
    list(
      "TOTAL (ha)" = color_tile("transparent", "green"),
      "N" = color_tile("transparent", "red"),
      "MOYENNE (ha)" = custom_format
    )
  )

```


```{r}
#| label: cultures_in_gpkg
#| echo: false
#| message: false
#| warning: false
#| output: false

gpkg_cultures <- data_ref |> 
  filter(CODE_CULTURE %in% code_cultu_gpkg) |> 
  arrange(CODE_CULTURE)

gpkg_cultures |> 
  formattable(align = c("l", "l", "r", "l"))

```


```{r}
#| label: cultures_not_in_gpkg
#| echo: false
#| message: false
#| warning: false
#| output: false

code_cultu_missing <- data_ref |> 
  filter(!(CODE_CULTURE %in% code_cultu_gpkg)) |> 
  arrange(CODE_CULTURE)

code_cultu_missing |> 
  formattable(align = c("l", "l", "r", "l"))

```


```{r}
#| label: save_data_to_RDS
#| echo: false

get_culture <- function(code_cultu) {

  rds_file <- paste(
    "DATA", "RDS", paste0("rpg_",code_cultu,".RDS"), sep = "/"
  )
  if (!(file.exists(rds_file))) {
    tic(msg = glue("création RDS pour le code culture : {code_cultu}"))
    df <- st_read(
      gpkg_file,
      query = glue(
        "select * from parcelles_graphiques where code_cultu = '{code_cultu}';"
      ),
      as_tibble = TRUE
    )
    saveRDS(df, rds_file)
    toc()
  } 
}
 
code_cultu_gpkg |> 
  walk(get_culture)  

```


```{r}
#| label: recup_contours_departements_français
#| echo: false
#| message: false
#| output: false

contours_geo <- st_geometry(st_read("DATA/OSM/departements-20180101.shp"))
contour_geo_2154 <- st_transform(contours_geo, crs = st_crs("EPSG:2154"))
# st_bbox(c(xmin = 80000, xmax = 1242000, ymin = 6051000, ymin = 7109000), crs = st_crs("EPSG:2154"))

```


```{r}
#| label: plot_gpkg_culture
#| echo: false
#| message: false
#| warning: false
#| output: false

plot_culture <- function(code_cultu) {
  
  rds_file <- paste(
    "DATA", "RDS", paste0("rpg_",code_cultu,".RDS"), sep = "/"
  )
  png_file <- paste(
    "DATA", "images", paste0("rpg_",code_cultu,".png"), sep = "/"
  )
  svg_file <- paste(
    "DATA", "images", paste0("rpg_",code_cultu,".svg"), sep = "/"
  )
  if ((file.exists(rds_file))) {
    tic(msg = glue("lecture RDS et plot pour le code culture : {code_cultu}"))
    data <- readRDS(rds_file) 
    p <- ggplot() +
      geom_sf(data = data, colour = "red", linewidth = 0.05, fill = "red") +
      geom_sf(data = contour_geo_2154, colour = "black", linewidth = 0.05, fill = "transparent") +
      coord_sf(
        xlim = c(80000, 1242000),
        ylim = c(6051000, 7109000),
        crs = "EPSG:2154"
      ) +
      theme(
        panel.background = element_rect(fill = 'transparent', color = NA), #transparent panel bg
        plot.background = element_rect(fill = 'transparent', color = NA), #transparent plot bg
        panel.grid.major = element_line(linewidth = 0.1, color = "black", linetype = "dashed"),
        # panel.grid.minor = element_blank(), #remove minor gridlines
        # legend.background = element_rect(fill = 'transparent'), #transparent legend bg
        # legend.box.background = element_rect(fill = 'transparent') #transparent legend panel
        title = element_text(color = "black")
      ) +
      labs(
        title = glue("code culture : {code_cultu}"),
        subtitle = glue(gpkg_cultures |> 
                          filter(CODE_CULTURE == {{ code_cultu }}) |> 
                          pull(LIBELLE_CULTURE))
      )
    ggsave(png_file, p, bg = "white", width = 30, height = 30, units = "cm")
    toc()
  } else {
    message(
      glue("Aucune donnée pour le fichier associé au code culture : {code_cultu}")
    )
  }
}

# code_cultu_gpkg |> 
#   walk(plot_culture)

```

### Des exemples de répartition géographique

::: {#fig-cultures layout-ncol=1}

![Prairie permanente](images/rpg_PPH.png){#fig-surus}

![Blé tendre d'hiver](images/rpg_BTH.png){#fig-hanno}

Exemple de cultures
:::


